릴리에션 스키마 변환 규칙
1. 모든 개체는 릴레이션으로 변환
2. 다대다 관계는 릴레이션으로 변환 (정규화 위반, 관계 풀기)
3. 일대다 관계는 외래키로 표현
4. 일대일 관계는 외래키로 표현
5. 다중 값 속성은 릴레이션으로 변환

정규화
- 잘못 설계된 테이블을 수정해서 정상으로 만드는 과정. 순차적 진행.
- 목적 : 중복 데이터 최소화

이상현상(Anomaly) 
- 하나의 릴레이션에 두 개 이상 정보가 포함되어 있으면 발생
- 잘못 설계된 테이블에 데이터 조작 이상 현상 발생, 일관성 훼손 무결성 깨짐
- 해결 : 정규화 (릴레이션 속성들 간 함수적 종석 파악 및 분해)

이상현상 종류
- 삽입 이상(Insertion anomaly) : 릴레이션에 데이터 삽입 시 원하지 않는 데이터도 insert
- 삭제 이상(deletion anomaly) : 릴레이션에 튜플 삭제 시 원하지 않는 값도 삭제 (Triggered Deletion)
- 갱신 이상(update anomaly) : 릴레이션에 튜플 값 수정 시 일부 정보만 갱신됨, 데이터 불일치 문제(Inconsistency)

함수적 종속성(Functional Dependency)
 - 속성 A를 알면, 다른 속성 B의 값이 유일하게 정해지는 관계
 - 속성 B는 속성 A에 종속한다(Dependent)
 - 속성 A는 속성 B를 결정한다(Determine)
 1. 기본 키
 2. 함수 종속성 : 릴레이션의 연관성있는 속성들로만 구성되도록 분해
 
완전 함수 종속 : 기본키에 대해 완전히 종속
부분 함수 종속 : 기본키에 대해 부분적 종속

정규형
 - 정규형이 높을수록 이상 현상 감소
 - 정규형 증가 시 요구되는 제약조건 증가
 - 보통 3 정규형까지 진행.

비정규 릴레이션
1정규형(1NF)
 - 이상현상과 무관 
 - 규칙 : 모든 속성을 하나의 값만 가짐
 - 복수의 속성 값을 가지는 속성 분리
 - 테이블 하나의 속성에는 여려 개의 데이터 값이 중복되어 나타나지 않아야 함
 - 반복 속성 제거 후 따로 릴레이션 제작
2정규형(2NF)
 - 릴레이션이 1정규형을 만족
 - 기본키가 아닌 속성이 완전함수종속일 때, 2정규형.
 - 모든 속성은 기본키에만 종속
 - 메인 주제 무관한 데이터 뺀다
3정규형
 - 2정규형 만족, 기본키가 아닌 모든 속성 간에는 서로 종속 불가
 - 일반속성은 다른 속성을 결정 지을 수 없다
 - 기본키가 아닌 일반 커럼에 종속된 컬럼을 다른 테이블로 빼는 작업

무손실 분해
 - 릴레이션의 관계 유지를 위해 분해된 릴레이션에 공통 속성을 한 개 이상 두어야 한다. (기본키와 외래키 관계유지)
 - 조인 시 원본의 릴레이션으로 전환시 이것을 무손실분해라고 함.

정규화 진행 순서
 1. 실제 데이터를 보고 정규화를 하는 것이 아니고, 스키마를 보고 진행
 2. 기본 키 지정
 3. 함수적 종속 확인
 4. 정규화 순차적 진행

서브쿼리
 - 쿼리 안에 들어가는 또다른 쿼리
 - 괄호 안에 작성
 - 서브쿼리에는 세미콜론을 붙이지 않는다

다중컬럼, 단일행반환 서브쿼리
 - 서브쿼리 조회결과 여러 컬림이 반환, 단일 행으로.

서브쿼리 사용 연산자
1)단일 행 비교 연산자 : =,<,>,<= 등
2)다중 행 비교 연산자 : IN, ALL, ANY, SOME, EXISTS

서브쿼리 사용 위치에 따른 종류
1) SELECT절 작성 스칼라 서브쿼리
2) FROM절 작성 인라인 뷰
3) WHERE절 작성 중첩 질의문

스칼라 서브쿼리
 - 조회 데이터가 많은 경우 반복적인 SELECT로 인해 성능 저하 가능
 - 조회결과 : 단일 행 단일 열의 결과 반환
 - 다중 행 또는 다중 열 반환 시 에러발생
 
인라인 뷰 
 - 조회결과 : 다중 행, 다중 열 무관
 - 별칭을 작성

중첩 질의문
 - 연산자와 함께 사용
 - 조회결과 보통 1개

IN(서브쿼리) : 조회결과 중 하나만 만족해도 참
ANY(서브쿼리) : 서브쿼리의 리턴되는 값과 조건을 비교해서 하나 이상 만족 시 참 (OR) = SOME
ALL(서브쿼리) : 서브쿼리의 리턴되는 값과 조건을 비교해서 모두 만족 시 참 (AND)
EXISTS : boolean 형태. 만족 값 하나라도 존재 시 참. 속도가 빠르다.


















